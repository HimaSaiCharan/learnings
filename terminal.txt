TERMINAL INTRO: 
  An interface to interact with the computer (Hardware). 
  In the modern times, humans developed a software and named it as "TERMINAL" as it is one end of the computer and lets humans interact with the computer.
  Terminal is the most convinent way to use to SHELL.

SHELL INTRO: 
  Program that allows user to interact with the OS through a command-line interface (CLI) or a graphical user interface (GUI).

TERMINAL SHORTCUTS: 
  ctrl + l -> clear screen
  cmd + k -> clear screen and remove history
  cmd + l -> clear last executed command  
  ctrl + c -> come out of the current process

TERMINAL SPECIAl CHARACTERS:
  / -> used as seperator for directories
  / -> refers to the root directory
  . -> refers to current directory
  .. -> refers to parent directory
  ~ -> refers to the home directory
  - -> acts an extra argument for commands
    -a -> select all files
    -r -> recurse through all files
    -p -> creates intermediate directories as required.
  % -> shows that a file has ended if the file doesn't end with a new line

TERMINAL COMMANDS: 
  brew install -> downloads and installs a package

  pwd -> displays the present working directory

  ls directory -> displays all the content of the specified directory
    ls -a directory -> displays all the content (including hidden files) of the specified directory
    ls -l directory/fileName -> displays the size of the files in bytes
    ls -lh directory/fileName -> displays the size of the files in human readable format.

  cd directory -> switches the present working directory to the specified directory

  code directory -> opens the specified directory in visual studio code 
    code directory/fileName -> opens the specified file in visual studio code

  deno directory/fileName -> interprets and executes javascript files
    deno run directory/fileName -> interprets and executes javascript files (somehow quickly)
    deno directory/fileName > destinationDirectory/fileName (or) deno run directory/fileName > destinationDirectory/fileName -> creates a text file storing the output of a javascript program

  tree directory -> displays all the files and directory in the specified directory

  mkdir directory -> creates a new directory
    mkdir -p nonExistentDirectory/directory -> creates a new directory structure
  
  cp directory/fileName destinationDirectory -> copies a file to the specified directory
    cp directory/fileName destinationDirectory/fileName -> copies the content of a file to the specified file (replace content)
    cp directory/fileName directory/fileName destinationDirectory -> copies all specified files to the specified directory
    cp -r directory destinationDirectory -> copies all the files from a directory to the specified directory
  
  mv directory/fileName destinationDirectory -> moves a file to the specified directory
    mv directory destinationDirectory -> moves a directory to the specified directory
    mv directory/fileName directory/fileName destinationDirectory -> moves all specified files to the specified directory
  
  rm fileName -> deletes a file
    rm -r directory -> deletes a directory even if it has content
  
  rmdir directory -> deletes a directory only if it is empty
  
  touch directory/fileName -> creates a file
  
  cat directory/fileName -> displays the content of the specified file
    cat directory/fileName directory/fileName -> displays the content of the all the specified files
  
  man command-> displays the manual of the specified command.

  head directory/fileName -> displays 10 lines of the file from start.
    head -n(number) directory/fileName -> return specified number of lines of the file.
  
  tail directory/fileName -> displays 10 lines of the file from the end.
    head -n(number) directory/fileName -> displays specified number of lines of the file from the end.

  wc directory/fileName -> display lines, words, characters of the file.
    wc -l directory/fileName -> displays number of lines in the file.
    wc -w directory/fileName -> displays number of words in the file.
    wc -L directory/fileName -> displays number of characters of the biggest line of the file.
    wc -wl directory/fileName -> displays number of words and lines in the file.

  echo '' -> write arguments to the standard output.

  fileName > newFileName -> replaces all the content to the new created file if the file is not created.
  fileName >> anotherFileName -> appends the content of the file to another file.

  
